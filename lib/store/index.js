// Generated by CoffeeScript 1.9.3
(function() {
  var CHANGE_EVENT, Dispatcher, EventEmitter, Store, assign;

  Dispatcher = require('../dispatcher/');

  EventEmitter = require('events').EventEmitter;

  assign = require('object-assign');

  CHANGE_EVENT = 'change';

  Store = assign({}, EventEmitter.prototype, {
    name: '',
    data: {},
    Actions: {},
    _init: function(init) {
      this.registerViewActions(assign({}, this.viewActions, {
        setState: null
      }));
      this.registerServerActions(this.serverActions);
      this.registerActions(this.actions);
      return typeof init === "function" ? init() : void 0;
    },
    setState: function(obj) {
      this.data = assign({}, this.data, obj);
      return this.emitChange();
    },
    getState: function() {
      return this.data;
    },
    getStateValue: function(key) {
      return this.data[key];
    },
    registerActions: function(actions) {
      if (actions != null) {
        this.registerViewActions(actions.view);
      }
      if (actions != null) {
        this.registerServerActions(actions.server);
      }
      return this;
    },
    registerViewActions: function(actions) {
      var k, v;
      for (k in actions) {
        v = actions[k];
        this._registerAction('handleViewAction', k, v);
      }
      return this;
    },
    registerServerActions: function(actions) {
      var k, v;
      for (k in actions) {
        v = actions[k];
        this._registerAction('handleServerAction', k, v);
      }
      return this;
    },
    _registerAction: function(handleType, name, func) {
      var action;
      action = {};
      if (func != null) {
        this[name] = func;
      }
      action[name] = (function(_this) {
        return function(data) {
          return Dispatcher[handleType]({
            actionType: _this.name + "." + name,
            data: data
          });
        };
      })(this);
      return this.Actions = assign({}, this.Actions, action);
    },
    emitChange: function() {
      return this.emit(CHANGE_EVENT);
    },
    addChangeListener: function(callback) {
      return this.on(CHANGE_EVENT, callback);
    },
    removeChangeListener: function(callback) {
      return this.removeListener(CHANGE_EVENT, callback);
    }
  });

  module.exports = Store;

}).call(this);
